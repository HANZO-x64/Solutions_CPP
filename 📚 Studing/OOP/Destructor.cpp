#include <iostream>
#include <string>

using namespace std;

/*
*	Деструктор - это специльная функция,
*	которая срабатывает при разрушении объекта класса.
*	(Провоположность конструктору класса).
*	Его работа схожа с конструктором, когда 
* 
*	Работа деструктора можно продемонстрировать с динамическими массивами.
*/


class MyClass
{
private:
	int* data;
public:
	// Реализация конструктора:
	MyClass(int size)
	{
		cout << "size array = " << size << endl;
		data = new int[size];

		for (int i = 0; i < size; i++)
		{
			data[i] = i;
			cout << data[i] << endl;
		}
		
		cout << "\n\ndata #" << data << "\tВызвался конструктор." << endl;
	}

	// Реализация диструктора:
	~MyClass()
	{
		delete[] data;
		cout << "\n\ndata #" << data << "\tВызвался диструктора." << endl;
	}
	/* 
	*	Диструктор нельз перегружать и добавлять параметры,
	*	как это делаем с конструктором.
	*	Конструкторов много, а диструктор один :(
	*	диструктор не нужно много, его основная задача: 
	*	регулировать в ручную освобождать ресурсы выделенные в классе.
	*/
};

void Fun()
{
	cout << "Fun started" << endl;

	MyClass a(4);

	MyClass b(5);

	MyClass c(6);
	// объекты уничтожаются в обратном порядке тому, в котором они создавались.
	
	cout << "Fun end" << endl;
	// После завершении работы функции, дестрктор выполняет работу.
}

int main()
{
	setlocale(LC_ALL, "ru");

	Fun();
	

	return 0;
}